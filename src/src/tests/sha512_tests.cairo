use garaga::hashes::sha_512::{Word64WordOperations, sha512};

fn get_lorem_ipsum() -> Array<u8> {
    let mut input: Array<u8> = array![
        0x4C,
        0x6F,
        0x72,
        0x65,
        0x6D,
        0x20,
        0x69,
        0x70,
        0x73,
        0x75,
        0x6D,
        0x2C,
        0x20,
        0x6F,
        0x72,
        0x20,
        0x6C,
        0x73,
        0x69,
        0x70,
        0x73,
        0x75,
        0x6D,
        0x20,
        0x61,
        0x73,
        0x20,
        0x69,
        0x74,
        0x20,
        0x69,
        0x73,
        0x20,
        0x73,
        0x6F,
        0x6D,
        0x65,
        0x74,
        0x69,
        0x6D,
        0x65,
        0x73,
        0x20,
        0x6B,
        0x6E,
        0x6F,
        0x77,
        0x6E,
        0x2C,
        0x20,
        0x69,
        0x73,
        0x20,
        0x64,
        0x75,
        0x6D,
        0x6D,
        0x79,
        0x20,
        0x74,
        0x65,
        0x78,
        0x74,
        0x20,
        0x75,
        0x73,
        0x65,
        0x64,
        0x20,
        0x69,
        0x6E,
        0x20,
        0x6C,
        0x61,
        0x79,
        0x69,
        0x6E,
        0x67,
        0x20,
        0x6F,
        0x75,
        0x74,
        0x20,
        0x70,
        0x72,
        0x69,
        0x6E,
        0x74,
        0x2C,
        0x20,
        0x67,
        0x72,
        0x61,
        0x70,
        0x68,
        0x69,
        0x63,
        0x20,
        0x6F,
        0x72,
        0x20,
        0x77,
        0x65,
        0x62,
        0x20,
        0x64,
        0x65,
        0x73,
        0x69,
        0x67,
        0x6E,
        0x73,
        0x2E,
        0x20,
        0x54,
        0x68,
        0x65,
        0x20,
        0x70,
        0x61,
        0x73,
        0x73,
        0x61,
        0x67,
        0x65,
        0x20,
        0x69,
        0x73,
        0x20,
        0x61,
        0x74,
        0x74,
        0x72,
        0x69,
        0x62,
        0x75,
        0x74,
        0x65,
        0x64,
        0x20,
        0x74,
        0x6F,
        0x20,
        0x61,
        0x6E,
        0x20,
        0x75,
        0x6E,
        0x6B,
        0x6E,
        0x6F,
        0x77,
        0x6E,
        0x20,
        0x74,
        0x79,
        0x70,
        0x65,
        0x73,
        0x65,
        0x74,
        0x74,
        0x65,
        0x72,
        0x20,
        0x69,
        0x6E,
        0x20,
        0x74,
        0x68,
        0x65,
        0x20,
        0x31,
        0x35,
        0x74,
        0x68,
        0x20,
        0x63,
        0x65,
        0x6E,
        0x74,
        0x75,
        0x72,
        0x79,
        0x20,
        0x77,
        0x68,
        0x6F,
        0x20,
        0x69,
        0x73,
        0x20,
        0x74,
        0x68,
        0x6F,
        0x75,
        0x67,
        0x68,
        0x74,
        0x20,
        0x74,
        0x6F,
        0x20,
        0x68,
        0x61,
        0x76,
        0x65,
        0x20,
        0x73,
        0x63,
        0x72,
        0x61,
        0x6D,
        0x62,
        0x6C,
        0x65,
        0x64,
        0x20,
        0x70,
        0x61,
        0x72,
        0x74,
        0x73,
        0x20,
        0x6F,
        0x66,
        0x20,
        0x43,
        0x69,
        0x63,
        0x65,
        0x72,
        0x6F,
        0x27,
        0x73,
        0x20,
        0x44,
        0x65,
        0x20,
        0x46,
        0x69,
        0x6E,
        0x69,
        0x62,
        0x75,
        0x73,
        0x20,
        0x42,
        0x6F,
        0x6E,
        0x6F,
        0x72,
        0x75,
        0x6D,
        0x20,
        0x65,
        0x74,
        0x20,
        0x4D,
        0x61,
        0x6C,
        0x6F,
        0x72,
        0x75,
        0x6D,
        0x20,
        0x66,
        0x6F,
        0x72,
        0x20,
        0x75,
        0x73,
        0x65,
        0x20,
        0x69,
        0x6E,
        0x20,
        0x61,
        0x20,
        0x74,
        0x79,
        0x70,
        0x65,
        0x20,
        0x73,
        0x70,
        0x65,
        0x63,
        0x69,
        0x6D,
        0x65,
        0x6E,
        0x20,
        0x62,
        0x6F,
        0x6F,
        0x6B,
        0x2E,
        0x20,
        0x49,
        0x74,
        0x20,
        0x75,
        0x73,
        0x75,
        0x61,
        0x6C,
        0x6C,
        0x79,
        0x20,
        0x62,
        0x65,
        0x67,
        0x69,
        0x6E,
        0x73,
        0x20,
        0x77,
        0x69,
        0x74,
        0x68,
    ];
    input
}

#[test]
fn test_sha512_lorem_ipsum() {
    let msg = get_lorem_ipsum();
    let res = sha512(msg).span();

    assert_eq!(
        res,
        array![
            0xd5,
            0xa2,
            0xe1,
            0x4e,
            0xf4,
            0x20,
            0xf8,
            0x2d,
            0x68,
            0x2b,
            0x19,
            0xc3,
            0xd0,
            0x70,
            0xf4,
            0x81,
            0x14,
            0xcb,
            0xb9,
            0x74,
            0x7c,
            0x7d,
            0xb1,
            0x15,
            0xce,
            0xa5,
            0x41,
            0x3e,
            0xf8,
            0xcb,
            0x8f,
            0xba,
            0xc6,
            0x90,
            0x17,
            0xc5,
            0x17,
            0x0f,
            0x01,
            0xc4,
            0x77,
            0xb3,
            0xdf,
            0x3d,
            0xfb,
            0x34,
            0xd3,
            0x50,
            0x8f,
            0xa0,
            0xb2,
            0xb1,
            0x37,
            0xd4,
            0xcb,
            0x54,
            0x60,
            0x9e,
            0x63,
            0x3d,
            0x14,
            0x45,
            0x82,
            0xc9,
        ]
            .span(),
    );
}

#[test]
fn test_sha512_size_one() {
    let mut arr: Array<u8> = array![49];
    let res = sha512(arr).span();

    assert_eq!(
        res,
        array![
            0x4d,
            0xff,
            0x4e,
            0xa3,
            0x40,
            0xf0,
            0xa8,
            0x23,
            0xf1,
            0x5d,
            0x3f,
            0x4f,
            0x01,
            0xab,
            0x62,
            0xea,
            0xe0,
            0xe5,
            0xda,
            0x57,
            0x9c,
            0xcb,
            0x85,
            0x1f,
            0x8d,
            0xb9,
            0xdf,
            0xe8,
            0x4c,
            0x58,
            0xb2,
            0xb3,
            0x7b,
            0x89,
            0x90,
            0x3a,
            0x74,
            0x0e,
            0x1e,
            0xe1,
            0x72,
            0xda,
            0x79,
            0x3a,
            0x6e,
            0x79,
            0xd5,
            0x60,
            0xe5,
            0xf7,
            0xf9,
            0xbd,
            0x05,
            0x8a,
            0x12,
            0xa2,
            0x80,
            0x43,
            0x3e,
            0xd6,
            0xfa,
            0x46,
            0x51,
            0x0a,
        ]
            .span(),
    );
}

#[test]
fn test_size_zero() {
    let msg = array![];

    let res = sha512(msg).span();

    assert_eq!(
        res,
        array![
            0xcf,
            0x83,
            0xe1,
            0x35,
            0x7e,
            0xef,
            0xb8,
            0xbd,
            0xf1,
            0x54,
            0x28,
            0x50,
            0xd6,
            0x6d,
            0x80,
            0x07,
            0xd6,
            0x20,
            0xe4,
            0x05,
            0x0b,
            0x57,
            0x15,
            0xdc,
            0x83,
            0xf4,
            0xa9,
            0x21,
            0xd3,
            0x6c,
            0xe9,
            0xce,
            0x47,
            0xd0,
            0xd1,
            0x3c,
            0x5d,
            0x85,
            0xf2,
            0xb0,
            0xff,
            0x83,
            0x18,
            0xd2,
            0x87,
            0x7e,
            0xec,
            0x2f,
            0x63,
            0xb9,
            0x31,
            0xbd,
            0x47,
            0x41,
            0x7a,
            0x81,
            0xa5,
            0x38,
            0x32,
            0x7a,
            0xf9,
            0x27,
            0xda,
            0x3e,
        ]
            .span(),
    );
}
