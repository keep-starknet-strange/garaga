#!/usr/bin/env node

// This script will patch a 'wasm-pack --target web' output folder
// to make the code platform agnostic (web vs nodejs)

const fs = require('fs');
const path = require('path');

function transpileExports(input) {
  // this is a non-comprehensive implementation
  return input
    // deals with: export default ...
    .replace(/\bexport\s+default\s+(\w+)\s*;/g, 'module.exports = $1;')
    // deals with: export function ...
    .replace(/\bexport\s+function\s+(\w+)\s*\(/g, 'exports.$1 = $1;\nfunction $1(')
    // deals with: export { ... }
    .replace(/\bexport\s*\{([\w\s,]*)\}\s*;/g, (match, $1) => {
      const ids = $1.split(',').map((id) => id.trim());
      return ids.map((id) => 'exports.' + id + ' = ' + id + ';').join('\n');
    });
}

function main() {
  // package name
  const pkgName = 'garaga_rs';

  // package folder
  const pkgFolder = path.join(__dirname, 'pkg');

  // file names
  const jsonName = 'package.json';

  const jsName = pkgName + '.js';
  const wasmName = pkgName + '_bg.wasm';
  const wasmtsName = pkgName + '_bg.wasm.d.ts';

  const cjsName = pkgName + '.cjs';
  const mjsName = pkgName + '.mjs';
  const wasmcjsName = pkgName + '_bg.wasm.cjs';
  const wasmmjsName = pkgName + '_bg.wasm.mjs';

  // file paths
  const jsonFile = path.join(pkgFolder, jsonName);

  const jsFile = path.join(pkgFolder, jsName);
  const wasmFile = path.join(pkgFolder, wasmName);
  const wasmtsFile = path.join(pkgFolder, wasmtsName);

  const cjsFile = path.join(pkgFolder, cjsName);
  const mjsFile = path.join(pkgFolder, mjsName);
  const wasmcjsFile = path.join(pkgFolder, wasmcjsName);
  const wasmmjsFile = path.join(pkgFolder, wasmmjsName);

  const importModuleVarName = 'default_module_base64_string';

  // if already patched, skip
  if (fs.existsSync(wasmmjsFile)) return;

  // patches .json file:
  // - sets .cjs as main
  // - sets .mjs as module
  // - sets sideEffects to false
  // - replaces references to .js file by .cjs and .mjs files
  // - replaces references to .wasm file by .wasm.cjs and .wasm.mjs files
  {
    const input = fs.readFileSync(jsonFile, 'utf8');
    const json = JSON.parse(input);
    json['main'] = cjsName;
    json['module'] = mjsName;
    json['sideEffects'] = false;
    json['files'] = json['files'] || [];
    json['files'] = json['files'].filter((name) => ![jsName, wasmName].includes(name));
    json['files'].push(cjsName);
    json['files'].push(mjsName);
    json['files'].push(wasmcjsName);
    json['files'].push(wasmmjsName);
    json['exports'] = json['exports'] || {};
    json['exports']['.'] = json['exports']['.'] || {};
    json['exports']['.']['require'] = json['main'];
    json['exports']['.']['import'] = json['module'];
    json['exports']['.']['types'] = json['types'];
    const output = JSON.stringify(json, undefined, 2);
    fs.writeFileSync(jsonFile, output, 'utf8');
  }

  // creates .mjs file:
  // - uses .wasm.mjs file as the default WASM module
  {
    const importStmt = 'import ' + importModuleVarName + ' from \'./' + wasmmjsName + '\';';
    const funcSig = 'function __wbg_init(module_or_path)';
    const newFuncSig = 'function __wbg_init(module_or_path = { module_or_path: ' + importModuleVarName + ' })';
    const input = fs.readFileSync(jsFile, 'utf8');
    const output = importStmt + '\n\n' + input.replace(funcSig, newFuncSig);
    fs.writeFileSync(mjsFile, output, 'utf8');
  }

  // creates .cjs file:
  // - uses .wasm.cjs file as the default WASM module
  {
    const requireStmt = 'const ' + importModuleVarName + ' = require(\'./' + wasmcjsName + '\');';
    const funcSig = 'function __wbg_init(module_or_path)';
    const newFuncSig = 'function __wbg_init(module_or_path = { module_or_path: ' + importModuleVarName + ' })';
    const input = fs.readFileSync(jsFile, 'utf8');
    const output = '\'use strict\';\n\n' + requireStmt + '\n\n' + input.replace(funcSig, newFuncSig);
    fs.writeFileSync(cjsFile, transpileExports(output), 'utf8');
  }

  // encodes .wasm file as .wasm.cjs:
  // - creates a .wasm.cjs file exporting the binary contents of the .wasm file
  {
    const input = fs.readFileSync(wasmFile).toString('base64');
    const output = '\'use strict\';\n\nmodule.exports = "data:application/wasm;base64,' + input + '";';
    fs.writeFileSync(wasmcjsFile, output, 'utf8');
  }

  // encodes .wasm file as .wasm.mjs:
  // - creates a .wasm.mjs file exporting the binary contents of the .wasm file
  {
    const input = fs.readFileSync(wasmFile).toString('base64');
    const output = 'export default "data:application/wasm;base64,' + input + '";';
    fs.writeFileSync(wasmmjsFile, output, 'utf8');
  }

  // cleans up now obsolete files:
  // - removes .js, .wasm, and .wasm.d.ts files
  {
    fs.rmSync(jsFile);
    fs.rmSync(wasmFile);
    fs.rmSync(wasmtsFile);
  }
}

main();
