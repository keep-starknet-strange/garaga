#!/usr/bin/env node

// This script will patch a 'wasm-pack --target web' output folder
// to make the code platform agnostic (web vs nodejs)

const fs = require('fs');
const path = require('path');

function main() {
  const pkgName = 'garaga_rs';

  const pkgFolder = path.join(__dirname, 'pkg');

  const jsonName = 'package.json';
  const jsName = pkgName + '.js';
  const wasmName = pkgName + '_bg.wasm';
  const wasmtsName = pkgName + '_bg.wasm.d.ts';
  const wasmjsName = pkgName + '_bg.wasm.js';

  const jsonFile = path.join(pkgFolder, jsonName);
  const jsFile = path.join(pkgFolder, jsName);
  const wasmFile = path.join(pkgFolder, wasmName);
  const wasmtsFile = path.join(pkgFolder, wasmtsName);
  const wasmjsFile = path.join(pkgFolder, wasmjsName);

  const importModuleVarName = 'default_module_base64_string';

  // if already patched, skip
  if (fs.existsSync(wasmjsFile)) return;

  // patches .json file:
  // - replaces references to .wasm file by .wasm.js file in package.json
  {
    const input = fs.readFileSync(jsonFile, 'utf8');
    const output = input.replaceAll('"' + wasmName + '"', '"' + wasmjsName + '"');
    fs.writeFileSync(jsonFile, output, 'utf8');
  }

  // patches .js file:
  // - imports .wasm.js file and uses it as the default WASM module
  {
    const input = fs.readFileSync(jsFile, 'utf8');
    const output =
      'import ' + importModuleVarName + ' from \'./' + wasmjsName + '\';\n\n' +
      input.replace('new URL(\'' + wasmName + '\', import.meta.url)', importModuleVarName);
    fs.writeFileSync(jsFile, output, 'utf8');
  }

  // replaces .wasm file by .wasm.js:
  // - creates a .wasm.js file exporting the binary contents of the .wasm file
  // - removes now obsolete .wasm and .wasm.d.ts files
  {
    const input = fs.readFileSync(wasmFile).toString('base64');
    const output = 'export default "data:application/wasm;base64,' + input + '"';
    fs.rmSync(wasmFile);
    fs.rmSync(wasmtsFile);
    fs.writeFileSync(wasmjsFile, output);
  }
}

main();
