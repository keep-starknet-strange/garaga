# .github/workflows/docs-sync.yml
#
# Keep GitBook docs (docs/gitbook) and source code in sync.
#  ├─ create-docs-pr  : docs  ➜  main   (PR auto-merges if docs-only)
#  └─ sync-main-to-docs : main  ➜  docs  (keeps non-docs files identical to main)

name: Documentation Sync

permissions:
  contents: write        # allow pushing branches / squash-merge
  pull-requests: write   # allow opening / merging PRs
  issues: write            # create & apply labels

on:
  push:
    branches: [ main, docs ]          # run on every push to either branch
defaults:
  run:
    shell: bash                      # strict mode added in scripts

concurrency:
  group: docs-sync-${{ github.ref }}
  cancel-in-progress: true

#───────────────────────────────────────────────────────────────────────────────
#  A.  docs ➜ main  – keep ONE rolling PR (branch: docs-sync)
#───────────────────────────────────────────────────────────────────────────────
jobs:
  create-docs-pr:
    if: >-
      github.event.ref == 'refs/heads/docs' &&
      ( github.actor == 'gitbook-com[bot]' ||
        github.actor == 'gitbook-io[bot]' ||
        contains(github.event.head_commit.message, '[gitbook]') )
    runs-on: ubuntu-latest

    steps:
      # 1️⃣  Check out MAIN (clean state)
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: false

      - name: Configure Git
        run: |
          git config user.name  "GitBook Docs Bot"
          git config user.email "docs-bot@garaga.dev"

      # 2️⃣  Create or update branch docs-sync, then overlay docs/gitbook
      - name: Prepare docs-sync branch
        run: |
          set -euo pipefail
          git fetch origin docs:origin-docs
          BR="docs-sync"

          # If the branch already exists on the remote, check it out;
          # otherwise create it from current (main).
          if git ls-remote --exit-code --heads origin "$BR" >/dev/null 2>&1; then
            git fetch origin "$BR":"$BR"
            git switch "$BR"
          else
            git switch -c "$BR"
          fi

          # Copy ONLY docs/gitbook from the docs branch
          git checkout origin-docs -- docs/gitbook
          echo "PR_BRANCH=$BR" >> "$GITHUB_ENV"

      # 3️⃣  Detect what actually changed
      - name: Detect docs-only / mixed change
        id: diff
        run: |
          set -euo pipefail
          CHANGED=$(git diff --name-only origin/main...HEAD)
          echo "changed_files<<EOF" >> "$GITHUB_OUTPUT"; echo "$CHANGED" >> "$GITHUB_OUTPUT"; echo "EOF" >> "$GITHUB_OUTPUT"

          if [[ -z "$CHANGED" ]]; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"; exit 0; fi

          NON_DOCS=$(echo "$CHANGED" | grep -vE '^docs/gitbook/' || true)
          [[ -z "$NON_DOCS" ]] && echo "docs_only=true"  >> "$GITHUB_OUTPUT" \
                                || echo "docs_only=false" >> "$GITHUB_OUTPUT"

      - name: Stop if nothing changed
        if: steps.diff.outputs.no_changes == 'true'
        run: echo "Nothing new to PR – exiting."

      # 4️⃣  Decide PR metadata
      - name: Set PR metadata
        id: meta
        run: |
          if [[ "${{ steps.diff.outputs.docs_only }}" == "true" ]]; then
            echo "labels=documentation,auto-generated" >> $GITHUB_OUTPUT
            echo "pr_type=📚 Documentation only"       >> $GITHUB_OUTPUT
          else
            echo "labels=documentation,auto-generated,needs-review" >> $GITHUB_OUTPUT
            echo "pr_type=⚠️ Mixed changes (requires review)"        >> $GITHUB_OUTPUT
          fi

      # 5️⃣  Create / update the single rolling PR (branch = docs-sync)
      - uses: peter-evans/create-pull-request@v7
        id: cpr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: docs-sync                  # ← fixed branch name
          base: main
          commit-message: "📚 docs(branch=docs) → main @ ${{ github.sha }}"
          title: "📚 Update documentation from GitBook"
          body: |
            This PR was automatically created to sync documentation from GitBook.

            **Changes**
            ```
            ${{ steps.diff.outputs.changed_files }}
            ```

            **Type:** ${{ steps.meta.outputs.pr_type }}
            **Commit:** ${{ github.sha }}
            **Author:** ${{ github.actor }}

            ⚠️ A maintainer review & **Squash & merge** are required.
            > 🤖 _docs-sync workflow_.
          labels: ${{ steps.meta.outputs.labels }}
          delete-branch: true         # branch auto-deleted *after* you squash-merge
          draft: false

      # 6️⃣  Comment when manual review is mandatory (mixed changes only)
      - name: Add manual-review comment
        if: steps.diff.outputs.docs_only == 'false' && steps.cpr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ steps.cpr.outputs.pull-request-number }} --repo "$GITHUB_REPOSITORY" --body $'⚠️ **Manual Review Required**

          This PR touches files outside `docs/gitbook/`.

          **Non-documentation files changed:**
          ```text
          $(echo "${{ steps.diff.outputs.changed_files }}" | grep -vE "^docs/gitbook/" || echo "none")
          ```'

#───────────────────────────────────────────────────────────────────────────────
#  B.  main ➜ docs  – keep non-docs files identical to main
#───────────────────────────────────────────────────────────────────────────────
  sync-main-to-docs:
    if: >-
      github.event.ref == 'refs/heads/main' &&
      !contains(github.event.head_commit.message, '[gitbook]') &&
      github.actor != 'gitbook-com[bot]' &&
      github.actor != 'gitbook-io[bot]'
    runs-on: ubuntu-latest

    steps:
      # 1) Check out docs branch (create it if it doesn’t exist)
      - uses: actions/checkout@v4
        with:
          ref: docs
          fetch-depth: 0
          persist-credentials: false

      - name: Configure Git
        run: |
          git config user.name  "GitHub Docs Sync"
          git config user.email "docs-sync@garaga.dev"
          git fetch origin main --tags --prune

      # 2) Bring code (everything except docs/gitbook) up to date with main
      - name: Sync non-docs files from main
        run: |
          set -euo pipefail
          TMP=$(mktemp -d)
          # Save current docs
          if [[ -d docs/gitbook ]]; then
            cp -R docs/gitbook "$TMP/"
          fi
          # Overwrite working tree with main
          git checkout origin/main -- .
          # Restore docs
          rm -rf docs/gitbook
          if [[ -d "$TMP/gitbook" ]]; then
            mkdir -p docs
            cp -R "$TMP/gitbook" docs/
          fi
          rm -rf "$TMP"

          # Stage everything, but commit only if something changed
          git add -A
          if git diff --cached --quiet; then
            echo "No updates required – docs branch already matches main."
            exit 0
          fi

          git commit -m "🔄 Sync non-docs files from main @ ${{ github.sha }}"

      # ─── 3) Open (or update) a PR towards docs ─────────────────────────────
      - uses: peter-evans/create-pull-request@v7
        id: cpr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # the current HEAD contains the commit we just made
          branch: main-sync-${{ github.sha }}-${{ github.run_id }}
          base: docs
          commit-message: "🔄 Sync non-docs files from main @ ${{ github.sha }}"
          title: "🔄 Sync main → docs (non-docs files)"
          body: |
            This PR keeps the **docs** branch in sync with **main** for every file \
            **outside** `docs/gitbook/`.

            Source commit: ${{ github.sha }}

            > 🤖 _docs-sync workflow_
          labels: documentation,auto-generated,auto-merge
          delete-branch: true
          draft: false   # open as a normal PR

      # ─── 4) Enable auto-merge; will complete when checks are green ─────────
      - name: Enable auto-merge
        if: steps.cpr.outputs.pull-request-number
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge ${{ steps.cpr.outputs.pull-request-number }} \
            --auto --squash --delete-branch --repo "$GITHUB_REPOSITORY" || \
            echo "Auto-merge pending required checks."
